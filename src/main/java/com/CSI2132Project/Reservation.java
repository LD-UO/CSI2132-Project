package com.CSI2132Project;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.List;

/**
 * Represents a reservation in the hotel reservation system.
 * This class stores information about a reservation, including
 * details about the employee who made the reservation, the room number,
 * the username of the customer, a unique reservation ID, and the start
 * and end dates of the reservation period.
 */

public class Reservation {
    private int employeeId;
    private int roomNum;
    private String username;
    private int reservationId; // Assuming this is generated by the database and not passed in constructor (SERIAL)
    private String startDate;
    private String endDate;

    private int streetNum;

    private String streetName;

    private String postalCode;

    // Creating an empty constructor to use the makeReservation method
    public Reservation(String username){
        this.username = username;
    }
    /**
     * Constructs a new Reservation instance.
     *
     * @param employeeId The ID of the employee who made the reservation.
     * @param roomNum The room number associated with this reservation.
     * @param username The username of the customer making the reservation.
     * @param startDate The start date of the reservation period (format: YYYY-MM-DD).
     * @param endDate The end date of the reservation period (format: YYYY-MM-DD).
     */
    public Reservation(int employeeId, int roomNum, String username, String startDate, String endDate, int streetNum, String streetName, String postalCode) {
        this.employeeId = employeeId;
        this.roomNum = roomNum;
        this.username = username;
        this.startDate = startDate;
        this.endDate = endDate;
        this.streetNum = streetNum;
        this.streetName = streetName;
        this.postalCode = postalCode;
        // reservationId is not included in the constructor parameter as it's typically auto-generated by the database.
    }

    // Getters
    public int getEmployeeId() {
        return employeeId;
    }

    public int getRoomNum() {
        return roomNum;
    }

    public String getUsername() {
        return username;
    }

    public int getReservationId() {
        return reservationId;
    }

    public String getStartDate() {
        return startDate;
    }

    public String getEndDate() {
        return endDate;
    }

    public int getStreetNum() {return streetNum; }

    public String getStreetName() {return streetName; }

    public String getPostalCode() {return postalCode; }

    // Setters
    public void setEmployeeId(int employeeId) {
        this.employeeId = employeeId;
    }

    public void setRoomNum(int roomNum) {
        this.roomNum = roomNum;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    // Note: Typically, you might not provide a setter for reservationId since it's auto-generated by the database.
    public void setReservationId(int reservationId) {
        this.reservationId = reservationId;
    }

    public void setStartDate(String startDate) {
        this.startDate = startDate;
    }

    public void setEndDate(String endDate) {
        this.endDate = endDate;
    }

    public void setStreetNum(int streetNum) {this.streetNum = streetNum;}

    public void setStreetName(String streetName) {
        this.streetName = streetName;
    }

    public void setPostalCode(String postalCode) {
        this.postalCode = postalCode;
    }


    public boolean makeReservation(Room r, String startDate, String endDate, int streetNum, String streetName, String postalCode, String username) throws Exception {
        if (!r.isAvailable()){
            return false; // Room not available
        }

        try (Connection con = new ConnectionDB().getConnection()) {
            // Select an employee who works at the hotel where the room is located
            String selectEmployeeSql = "SELECT Employee.employee_id " +
                    "FROM Employee " +
                    "JOIN HotelInstance ON Employee.StreetNum = HotelInstance.StreetNum " +
                    "AND Employee.StreetName = HotelInstance.StreetName " +
                    "AND Employee.PostalCode = HotelInstance.PostalCode " +
                    "WHERE HotelInstance.StreetNum = ? " +
                    "AND HotelInstance.StreetName = ? " +
                    "AND HotelInstance.PostalCode = ? " +
                    "ORDER BY RANDOM() LIMIT 1"; // Assumes employees are linked to hotels by address

            int employeeId = -1; // Placeholder for employee ID
            try (PreparedStatement pstmt = con.prepareStatement(selectEmployeeSql)) {
                pstmt.setInt(1, streetNum);
                pstmt.setString(2, streetName);
                pstmt.setString(3, postalCode);
                try (ResultSet rs = pstmt.executeQuery()) {
                    if (rs.next()) {
                        employeeId = rs.getInt("employee_id");
                    } else {
                        throw new Exception("No employees found for the specified hotel"); // Handle no employee found
                    }
                }
            }

            // Insert the reservation into the database, linking it to the selected employee
            String insertSql = "INSERT INTO Reservation (employee_id, RoomNum, username, startDate, endDate, StreetNum, StreetName, PostalCode) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
            try (PreparedStatement pstmt = con.prepareStatement(insertSql)) {
                pstmt.setInt(1, employeeId);
                pstmt.setInt(2, r.getRoomNum()); // Assuming Room class has a getRoomNum method
                pstmt.setString(3, username);
                pstmt.setDate(4, java.sql.Date.valueOf(startDate));
                pstmt.setDate(5, java.sql.Date.valueOf(endDate));
                pstmt.setInt(6, streetNum);
                pstmt.setString(7, streetName);
                pstmt.setString(8, postalCode);

                int affectedRows = pstmt.executeUpdate();
                if (affectedRows == 0) {
                    throw new Exception("Failed to create reservation");
                }
                return true; // Reservation successful
            }
        } catch (Exception e) {
            System.err.println("Reservation failed: " + e.getMessage());
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Fetches all reservations that haven't started yet.
     * @return A List of Reservation objects for all upcoming reservations.
     * @throws Exception If an error occurs during database access.
     */
    public static List<Reservation> getUpcomingReservations() throws Exception {
        List<Reservation> upcomingReservations = new ArrayList<>();
        ConnectionDB db = new ConnectionDB();

        String sql = "SELECT * FROM Reservation WHERE startDate > CURRENT_DATE ORDER BY startDate;"; //order for efficiency

        try (Connection con = db.getConnection();
             PreparedStatement ps = con.prepareStatement(sql);
             ResultSet rs = ps.executeQuery()) {

            while (rs.next()) {
                Reservation reservation = new Reservation(
                        rs.getInt("employee_id"),
                        rs.getInt("roomNum"),
                        rs.getString("username"),
                        rs.getString("startDate"),
                        rs.getString("endDate"),
                        rs.getInt("streetNum"),
                        rs.getString("streetName"),
                        rs.getString("postalCode")
                );
                upcomingReservations.add(reservation);
            }
        } catch (Exception e) {
            e.printStackTrace();
            throw new Exception("Failed to retrieve upcoming reservations: " + e.getMessage());
        }
        return upcomingReservations;
    }


}
